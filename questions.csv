Question,Answer
"What is the primary reason software engineering is necessary for developing complex software systems?","Software engineering is necessary to provide a structured approach (e.g., blueprint, design, testing, maintenance) to manage complexity, ensure quality, and mimic the success of conventional engineering."
"How does the lack of visualization in software engineering create challenges compared to conventional engineering?","Unlike conventional engineering, software engineering lacks clear visualization, leading to mutual misunderstandings due to the abstract nature of software, making it harder to convey and validate requirements."
"What are the key phases of the software development life cycle model as outlined in the notes?","The phases are: requirement analysis, planning, design, implementation, testing, integration, maintenance, and retirement."
"Describe the waterfall model and its approach to software development.","The waterfall model is a linear, sequential process involving requirement analysis, planning, design, implementation, testing, integration, maintenance, and retirement, mimicking conventional engineering with thorough documentation but limited client-developer communication."
"What are the main advantages of the rapid prototyping model in software engineering?","Rapid prototyping quickly builds system gists to clarify requirements, reducing mutual misunderstandings and negating the waterfall model’s long development cycles and limited communication."
"How does the agile model facilitate communication between developers and clients?","Agile uses frequent communication through daily standups, weekly sprints, and monthly/quarterly PI meetings, ensuring continuous feedback and alignment with client needs."
"What is the spiral model, and how does it incorporate risk analysis?","The spiral model combines waterfall, rapid prototyping, and statistical risk analysis for sequential/parallel connections, reducing risks but requiring significant resources."
"Explain the evolutionary model and its approach to system development.","The evolutionary model partitions the system into builds, constructing them sequentially to reduce risks and improve communication, but planning and integration are challenging unless builds are independent."
"What is mutual misunderstanding in software development, and what causes it?","Mutual misunderstanding occurs when clients and developers assume shared knowledge, leading to overconfidence and ambiguity, primarily due to the innate ambiguity of natural language."
"How can diagrams like use-case diagrams reduce mutual misunderstanding in software projects?","Use-case diagrams visually represent system functionalities and user interactions, clarifying requirements and reducing ambiguity with semi-formal UML notation."
"What role does rapid prototyping play in clarifying requirements between clients and developers?","Rapid prototyping creates quick models (e.g., in Python) to demonstrate system functionality, allowing early feedback and reducing misunderstandings, though it risks creating moving targets."
"How does using a formal method like mathematical modeling help eliminate ambiguity in software requirements?","Mathematical modeling, as a universal language, provides rigorous, unambiguous specifications, eliminating the vagueness inherent in natural language."
"What is double-blind testing, and why is it used to ensure fairness in evaluations?","Double-blind testing ensures neither proctors nor receivers know the test conditions (e.g., in medical trials), preventing bias and ensuring fairness, unlike single-blind testing, which may favor prestigious entities."
"How does A/B testing differ from double-blind testing in software evaluation?","A/B testing randomly tests two feature versions among users to compare performance, while double-blind testing ensures fairness by blinding both proctors and receivers, focusing on unbiased evaluation."
"Describe the process for comparing the performance of two web browsers (e.g., Chrome vs. Safari) using double-blind testing.","Assign users to use Chrome or Safari without knowing which browser they’re using, and ensure testers are unaware of browser assignments. Measure performance metrics (e.g., load time, memory usage) objectively, analyzing results without bias."
"How would you use A/B testing to evaluate specific features of two code editors, such as Vim and VS Code?","Randomly assign developers to use Vim or VS Code with a specific feature (e.g., autocomplete). Collect metrics like task completion time and user satisfaction, then compare results to determine which editor’s feature performs better."
"What are CASE tools, and how do they improve efficiency in software engineering?","CASE (Computer-Aided Software Engineering) tools, like smart editors and version control systems, automate tasks, enhance collaboration, and streamline development, improving efficiency."
"Name two specific CASE tools mentioned in the notes and their purposes.","VS Code: A smart editor for efficient coding and debugging. Git: Version control for collaboration and code management."
"What is computational complexity, and why is it critical in algorithm selection for software systems?","Computational complexity measures algorithm efficiency (e.g., time, space). It’s critical to select algorithms that balance performance and resource usage for scalable, efficient systems."
"Define coupling and cohesion, and explain their significance in modular software design.","Coupling: The degree of interdependence between modules (lower is better). Cohesion: The degree to which a module’s components work together (higher is better). They ensure modular, maintainable, and scalable software design."
"List the levels of cohesion from worst to best as described in the notes.","Coincidental, Logical, Temporal, Procedural, Communicational/Common, Informational, Functional"
"Enumerate the levels of coupling and explain why lower coupling is preferred.","Content, Common/Global, Control, Stamp, All passed data used, No direct relation. Lower coupling reduces module dependencies, enhancing maintainability and flexibility."
"Why must the use of “goto” statements be carefully justified in software systems?","“Goto” statements can lead to content coupling, reducing code understandability and maintainability, requiring strong justification (e.g., per Knuth) to pass code reviews."
"How does a finite state machine (FSM) contribute to system analysis in software engineering?","FSMs model system behavior as states and transitions, recognizing patterns (e.g., binary streams), simplifying analysis of regular language-based systems."
"What distinguishes a state chart from an FSM, and provide an example of its application?","State charts, part of UML, are more powerful with initial/base states, rectangular states, and eventless returns. Example: A vending machine accepting coins for a 30-cent drink, tracking state transitions."
"Explain the components of a Petri-net and how it models dynamic systems.","Petri-nets include places (circles, resources), transitions (bars, actions), edges (resource requirements), and tokens (available resources). They model dynamic systems by firing transitions, dynamically updating tokens to simulate resource flow."
"How can a Petri-net be used to address the 3-bankers paradox in software systems?","A Petri-net models the 3-bankers paradox by using places for chopsticks, transitions for eating, and tokens for resource availability, preventing deadlocks through careful token management."
"Describe the rules for developing a Petri-net for a college library system based on the notes.","Register new books before shelving. Require valid IDs for checkouts. Return books before deadlines for reshelving. Fine late returns (<6 months). Report/suspend for books not returned (>6 months). Sell books checked out >100 times. Ensure interconnected nets, avoid direct place-to-place or transition-to-transition connections, and use AND gates for transitions."
"What is the 3-bankers paradox, and how does it relate to deadlock in computer science?","The 3-bankers paradox involves three bankers needing two chopsticks to eat, risking deadlock if each holds one. In CS, it illustrates resource allocation issues, solved by priority queues or time-sharing to avoid deadlocks."
"How does the explore-and-exploit strategy in reinforcement learning apply to software development?","Explore (e.g., prototyping to test ideas) and exploit (e.g., refining based on feedback) optimize development by balancing innovation with proven methods, like evaluating candidates after exploring 37% of the pool."
"What are the three main machine learning paradigms mentioned in the notes, and how do they relate to software engineering?","Supervised: Learning from labeled data (e.g., bug prediction). Unsupervised: Clustering data (e.g., grouping user behaviors). Reinforcement: Learning via actions/rewards (e.g., optimizing development processes). They enhance automation, analysis, and decision-making in software engineering."
"Explain the purpose of a use-case diagram and its components in system analysis.","Use-case diagrams define system boundaries (rectangle), users (left/right for ordinary/privileged), and functionalities (ovals), connecting users to functions to clarify requirements and interactions."
"What is an Entity-Relation (E/R) diagram, and how does it support data modeling?","E/R diagrams use rectangles (entities), diamonds (relations), and links (m:n, m:1, 1:1) to model data relationships, supporting database design by clarifying entities and their connections."
"How does a collaboration class diagram facilitate communication in software design?","Collaboration class diagrams (UML) use I/O, control, and data classes with numbered data-messaging arrows to depict interactions, ensuring clear task allocation and communication among classes."
"Why is achieving Third Normal Form (3NF) important in relational database design?","3NF ensures non-key attributes are directly dependent on the key, reducing redundancy and update anomalies, improving database efficiency and integrity."
"How does the schema [ssn, name, age, gender, dept, dept_chair, college, college_president] violate 3NF?","It violates 3NF because non-key attributes (dept_chair, college_president) depend on non-key attributes (dept, college), not directly on the key (ssn), causing redundancy."
"What steps can be taken to refine a database schema to comply with 3NF?","Move violating attributes (e.g., dept_chair, college_president) to separate data dictionaries ([dept, dept_chair], [college, college_president]), linking them to the main table to eliminate dependencies."
"What is data dependency in relational databases, and why is it relevant to 3NF?","Data dependency (A→B) means if two tuples share the same A value, their B values are identical. It’s relevant to 3NF to ensure non-key attributes depend only on the key, avoiding redundancy."
"How does the Jackson System Development (JSD) approach structure object identification and service organization?","JSD identifies entities (e.g., books, customers) and their services (e.g., checkout, return), organizing them using tree notations (sequence, choices, loops) to model system behavior."
"What are the three main topics in software planning, and why are they essential?","Money: Budget allocation ensures resource availability. Personnel: Team roles drive development. Hardware/Software: Infrastructure supports implementation. They ensure feasibility, efficiency, and successful project execution."
"Describe one method for software system cost estimation and its advantages and disadvantages.","Human Hours: Measures time spent. Advantages: Easy to measure. Disadvantages: Susceptible to cheating, inaccurate effort reflection."
"What are the three types of engineers in a software team, and how do their roles differ?","Interaction: People-focused, excels in communication. Target-based: Task-driven, focuses on deliverables. Perfectionists: Detail-oriented, ensures high quality."
"Explain the concept of team cohesiveness and the drawbacks of a “too loose” team.","Team cohesiveness balances closeness and independence. A “too loose” team lacks trust, leading to a toxic environment, wasted security efforts, and minimal collaboration, harming productivity."
"What is the difference between high-level and low-level system design in software engineering?","High-level: Partitions the system into modules/classes (architecture). Low-level: Designs algorithms and data structures within each module."
"How does the 25-horse problem demonstrate efficient algorithm design for finding the top 3 horses?","The 25-horse problem uses 5 heats to group horses, a 6th heat for group champions, and a 7th for top contenders, minimizing races (7) to find the top 3, ensuring fairness and efficiency."
"What are the ethical responsibilities of a software engineer working for a private company?","Respect non-disclosure agreements, avoid leaking information, uphold copyright, and deliver competent, responsible work to maintain trust and integrity."
"What obligations do software engineers have when handling data for national security agencies?","Respect national security protocols, adhere to document classification levels, and ensure data confidentiality to protect sensitive information."
"What is the difference between software re-engineering and reverse software engineering?","Re-engineering: Modifies existing systems to improve functionality or adapt to new environments. Reverse Engineering: Extracts design and specifications from a working system, often for understanding or replication."
"Why is reverse software engineering considered more challenging than re-engineering?","Reverse engineering requires reconstructing specifications from code without documentation, often for classified systems, making it complex and research-intensive compared to modifying known systems in re-engineering."
"Explain how the Binet formula and matrix techniques achieve O(log n) complexity for Fibonacci number evaluation.","The Binet formula uses matrix exponentiation, where Fib(n) is computed via a 2x2 matrix M=[[1,1],[1,0]]. Using eigen-analysis (M=U*S*U⁻¹), the power M^(n-1) is calculated with O(log n) complexity via repeated squaring of the diagonal matrix S, significantly improving efficiency over recursive (O(1.618^n)) or linear (O(n)) methods."
"What are the ethical responsibilities of computing professionals in software engineering?","Ethical responsibilities include: Medical: Protecting patient privacy and leveraging computing for better treatments. Military: Safeguarding national security and adhering to document classification. Business: Honoring non-disclosure agreements, respecting copyrights, and ensuring competence. These uphold trust, integrity, and societal impact in the profession."
"What is the difference between a dictatorship and a democratic leadership style in team management?","A dictatorship involves one leader deciding everything, from technical to human resources, ensuring quick decisions but risking bias. A democratic style treats all members equally, making decisions harder but promoting inclusivity."
"Why is a mixture of leadership styles often preferred for optimal team format?","A mixture, with one project manager and one tech leader, balances decisive leadership with technical expertise, enabling efficient decision-making and specialized roles."
"What are the pros and cons of a team being too close, like friends or siblings?","**Pros**: Willingness to help and egoless coding. **Cons**: Reduced critical feedback, compromised system quality, biased personnel decisions, and potential conflicts with upper management."
"How does a too-loose team dynamic impact system development?","A too-loose team lacks trust, leading to a toxic environment and wasted efforts on security measures, but it can result in robust systems as no one assumes trust."
"What characterizes a professional team dynamic in terms of cohesiveness?","A professional dynamic is neither too close nor too loose, fostering moderate help and minimal harmful actions, balancing collaboration and objectivity."
"How does system theory illustrate the importance of teamwork using the 4x100 relay example?","The 4x100 relay shows that the whole is greater than the sum of parts, as winning teams often rely on coordination and synergy rather than just the fastest individual runners."
"Why is the Korean/Indian tying leg game considered a negative example of teamwork?","It restricts individual abilities by tying legs together, preventing effective utilization of personal strengths, leading to poor team performance."
"What is the difference between high-level and low-level system design?","High-level design partitions the system into modules/classes (architecture), while low-level design focuses on algorithms, logic, and data structures within each module."
"Why is loose coupling preferred in system design?","Loose coupling reduces dependencies between modules, making systems more modular, easier to maintain, and adaptable to changes."
"What does high cohesion mean in the context of module design?","High cohesion indicates that parts within a module are closely related, performing a single, well-defined task, improving clarity and maintainability."
"What is coincidental cohesion, and why is it considered the worst level?","Coincidental cohesion occurs when module parts have no meaningful relation, resembling a 'trashbin,' leading to poor organization and maintenance."
"How does procedural cohesion differ from temporal cohesion?","Procedural cohesion involves actions with cause-and-effect relationships (e.g., prerequisites), while temporal cohesion involves actions occurring in a time-ordered sequence with high correlation."
"What is communicational cohesion, and how does it relate to data structures?","Communicational cohesion occurs when all module services operate on a common data structure, enhancing efficiency and coherence."
"Why is content coupling considered unacceptable in system design?","Content coupling, where modules share private/state variables, creates tight dependencies, making systems harder to modify and prone to errors."
"How does control coupling differ from stamp coupling?","Control coupling involves one module’s return value dictating another’s logic, while stamp coupling passes unnecessary data, reducing efficiency."
"What is the benefit of using a matrix to analyze coupling between multiple modules?","A matrix’s upper triangle ensures all module pairs are evaluated, and labeling with the worst coupling type (e.g., content over control) highlights critical dependencies."
"Why should goto statements be used cautiously in programming?","Goto statements can lead to content coupling, reducing code understandability and failing code reviews, though justified use (per Knuth) can improve clarity if well-documented."
"How does the optimal algorithm for finding min/max in an array achieve 3/2n comparisons?","By comparing adjacent pairs first, then updating min/max with the smaller/larger value, it reduces comparisons to approximately 3n/2, as discovered by Gauss."
"What is the significance of loop invariants in the algorithm to find adjacent differing elements in an array?","Loop invariants (e.g., A[0] ≠ A[end]) ensure the problem’s feasibility while halving the search space each iteration, enabling efficient binary search-like logic."
"Why is the original recursive Fibonacci evaluation infeasible?","It has a time complexity of O(1.618^n) due to redundant calculations, making it impractical for large n."
"How does dynamic programming improve Fibonacci number evaluation?","Dynamic programming stores previously computed Fibonacci values in a dictionary, reducing time complexity to O(n) with O(n) space."
"What is the Markovian property in the stair-climbing Fibonacci algorithm?","The Markovian property means only the recent history (last two values) is needed, enabling O(n) time and O(1) space complexity."
"How does the Binet formula achieve O(log n) complexity for Fibonacci evaluation?","It uses matrix exponentiation with eigen-analysis, computing M^(n-1) via repeated squaring of a diagonal matrix, reducing time complexity to O(log n)."
"What is the key insight in solving the 9-beads problem with one abnormal bead?","Grouping beads into 3-3-3 and using previous measurement information exhaustively minimizes the number of weighings needed to identify the abnormal bead."
"How does binary coding reduce the number of mice needed in the 8-bottles poison problem?","By assigning each bottle a unique binary code and testing bits with mice, only log(n) mice are needed, significantly reducing resources compared to O(n)."
"What makes the 12-beads problem more complex than the 9-beads problem?","The 12-beads problem requires ingenious grouping (e.g., 1L+3H vs. 1H+3N in the second measure) to exhaustively cover all cases, demanding stronger Boolean reasoning."
"What is the strategy for stochastic gaming with an unfair coin or die?","Memorize counts of outcomes (e.g., heads/tails), then bet on the most frequent outcome, using probability/utility matching to maximize success."
"What are the three main machine learning paradigms described in the notes?","Supervised learning (learning from a teacher), unsupervised learning (clustering similar data), and reinforcement learning (exploring/exploiting based on rewards)."
"How does reinforcement learning apply to real-world tasks like gaming or biking?","It involves taking actions, receiving rewards/penalties, and adjusting strategies to maximize long-term rewards, mirroring how we learn complex tasks."
"What is the role of statistical redundancy in compression algorithms?","Statistical redundancy (e.g., repeats in music or spatial patterns in images) is exploited using techniques like Fourier transforms or quantization to reduce data size."
"What is the difference between lossless and lossy compression?","Lossless compression (e.g., run-length encoding) recovers all data perfectly, while lossy compression (e.g., JPEG) sacrifices details for smaller size, unrecoverable after compression."
"How does run-length encoding achieve compression in fax machines?","It encodes sequences of 0s (blank spaces) and 1s (ink) by their counts, reducing data size for transmittal pages, enabling efficient fax transmission."
"Why is quantization a key factor in lossy compression?","Quantization groups similar values (e.g., gray scales) into discrete levels, reducing data size but losing exact values, which human perception often doesn’t notice."
"How does Shannon’s information content relate to compression?","Shannon’s information content, -log(p(e)), quantifies an event’s surprise based on its probability, setting the entropy as the theoretical minimum for compression."
"What is the purpose of adding redundancy in Shannon’s channel encoding theory?","Redundancy (e.g., parity bits in Hamming code) improves the signal-to-noise ratio, enabling error detection or correction in noisy communication channels."
"How does the 25-horse problem ensure fairness in selecting the top 3 horses?","By using 5 heats, a 6th for group champions, and a 7th for top contenders, it ensures no horse is overlooked, and no owner can claim unfair exclusion."
"What are the ethical responsibilities of a software engineer in medical applications?","Respect patient privacy, ensure accurate and secure data handling, and leverage computing power to improve treatment outcomes responsibly."
"Why is respecting non-disclosure agreements critical in business software development?","It prevents leaking sensitive information, upholds trust, and protects intellectual property, maintaining professional integrity."
"What distinguishes object-oriented programming from functional programming?","Object-oriented programming uses inheritance and polymorphism, while functional programming avoids side effects, supports lazy evaluation, and treats functions as first-class objects."
"Why is SQL considered declarative rather than procedural?","SQL specifies what data to retrieve without detailing how to retrieve it, unlike procedural languages that outline step-by-step logic."
"What are the key considerations for improving iterative repeated squaring code?","Handle negative inputs, add clear comments, use meaningful variable names, implement sanity checks, and include test units for robustness."
"Why should variable and function names in coding be meaningful?","Meaningful names improve code readability, maintainability, and collaboration, reducing errors and confusion."
"What is the DRY principle in coding, and why is it important?","DRY (Don’t Repeat Yourself) minimizes code duplication, improving maintainability and reducing the risk of inconsistent updates."
"What is the difference between verification and validation in software testing?","Verification ensures the system meets specifications, while validation includes additional quality measures to build reputation and user trust."
"Why is black-box testing more popular than white-box testing?","Black-box testing requires less knowledge of the system’s internals, is more objective, and covers normal, edge, and random cases, but may miss specific code paths."
"What are the benefits of functional programming for big data applications?","No side effects, first-class functions, and lazy evaluation (e.g., Python generators) improve space efficiency and scalability for distributed data processing."
"How does top-down testing differ from bottom-up testing?","Top-down testing starts from the root to leaf nodes, prioritizing overall functionality, while bottom-up testing begins with leaf nodes, ensuring individual components work."
"What is adaptive maintenance in software engineering?","Adaptive maintenance modifies systems to work in new environments (e.g., upgrading from Windows 10 to 11), enhancing compatibility and reputation."
"Why is reverse engineering challenging for classified systems?","It involves reconstructing designs without documentation, often for national security or business secrets, requiring complex analysis and research."
"How does Huffman coding relate to Shannon’s entropy bound?","Huffman coding is an entropy coding method that approaches Shannon’s entropy bound, the theoretical minimum for compression, by assigning shorter codes to frequent symbols."